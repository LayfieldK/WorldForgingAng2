{"version":3,"sources":["user-edit.component.ts"],"names":["UserEditComponent","fb","router","activatedRoute","authService","this","title","errorMessage","isRegister","snapshot","url","path","isLoggedIn","navigate","prototype","ngOnInit","_this","userForm","group","username","forms_1","Validators","required","pattern","email","password","minLength","passwordConfirm","displayName","validator","compareValidator","addControl","FormControl","get","clearValidators","setValidators","subscribe","user","setValue","UserName","Email","DisplayName","fc1","fc2","controls","value","compareFailed","onSubmit","add","data","error","login","err","console","log","user_1","User","passwordNew","update","__decorate","core_1","Component","selector","template","exports_1"],"mappings":"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","file":"user-edit.component.js","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {Router, ActivatedRoute} from \"@angular/router\";\r\nimport {AuthService} from \"./auth.service\";\r\nimport {User} from \"./user\";\r\n\r\n@Component({\r\n    selector: \"user-edit\",\r\n    template: `\r\n<div class=\"user-container\">\r\n    <form class=\"form-user\" [formGroup]=\"userForm\" (submit)=\"onSubmit()\">\r\n        <h2 class=\"form-user-heading\">{{title}}</h2>\r\n        <div class=\"form-group\">\r\n            <input [disabled]=\"!this.isRegister\" formControlName=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Choose an Username\" autofocus />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.username.valid\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.username.valid && !this.userForm.controls.username.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"email\" type=\"text\" class=\"form-control\" placeholder=\"Type your e-mail address\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.email.valid\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.email.valid && !this.userForm.controls.email.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div *ngIf=\"!this.isRegister\" class=\"form-group\">\r\n            <input formControlName=\"passwordCurrent\" type=\"password\" class=\"form-control\" placeholder=\"Current Password\" />\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.passwordCurrent.valid\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                required\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Choose a Password\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.password.valid && !this.userForm.controls.password.pristine\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.password.valid && !this.userForm.controls.password.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"passwordConfirm\" type=\"password\" class=\"form-control\" placeholder=\"Confirm your Password\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.password.pristine && !this.userForm.hasError('compareFailed')\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"(!this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.passwordConfirm.pristine) || this.userForm.hasError('compareFailed')\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"displayName\" type=\"text\" class=\"form-control\" placeholder=\"Choose a Display Name\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input type=\"submit\" class=\"btn btn-primary btn-block\" [disabled]=\"!userForm.valid\" value=\"{{this.isRegister ? 'Register' : 'Save'}}\" />\r\n        </div>\r\n    </form>\r\n</div>\r\n    `\r\n})\r\n\r\nexport class UserEditComponent {\r\n    title = \"New User Registration\";\r\n    userForm: FormGroup ;\r\n    errorMessage = null;\r\n    isRegister: boolean;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n        private authService: AuthService) {\r\n        // determine behaviour by fetching the active route\r\n        this.isRegister = (activatedRoute.snapshot.url[0].path === \"register\");\r\n        if ((this.isRegister && this.authService.isLoggedIn())\r\n            || (!this.isRegister && !this.authService.isLoggedIn())) {\r\n            this.router.navigate([\"\"]);\r\n        }\r\n        if (!this.isRegister) {\r\n            this.title = \"Edit Account\";\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.userForm = this.fb.group(\r\n            {\r\n                username: [\"\", [\r\n                    Validators.required,\r\n                    Validators.pattern(\"[a-zA-Z0-9]+\")\r\n                ]],\r\n                email: [\"\", [\r\n                    Validators.required,\r\n                    Validators.pattern(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\")\r\n                ]],\r\n                password: [\"\", [\r\n                    Validators.required,\r\n                    Validators.minLength(6)]],\r\n                passwordConfirm: [\"\", [\r\n                    Validators.required,\r\n                    Validators.minLength(6)]],\r\n                displayName: [\"\", null]\r\n            },\r\n            {\r\n                validator: this.compareValidator('password', 'passwordConfirm')\r\n            }\r\n        );\r\n\r\n        if (!this.isRegister) {\r\n            this.userForm.addControl(\"passwordCurrent\",\r\n                new FormControl(\"\", Validators.required));\r\n            var password = this.userForm.get(\"password\");\r\n            password.clearValidators();\r\n            password.setValidators(Validators.minLength(6));\r\n            var passwordConfirm =\r\n                this.userForm.get(\"passwordConfirm\");\r\n            passwordConfirm.clearValidators();\r\n            passwordConfirm.setValidators(Validators.minLength(6));\r\n\r\n            this.authService.get().subscribe(\r\n                user => {\r\n                    this.userForm.get(\"username\")\r\n                        .setValue(user.UserName);\r\n                    this.userForm.get(\"email\")\r\n                        .setValue(user.Email);\r\n                    this.userForm.get(\"displayName\")\r\n                        .setValue(user.DisplayName);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    compareValidator(fc1: string, fc2: string) {\r\n        return (group: FormGroup): { [key: string]: any } => {\r\n            let password = group.controls[fc1];\r\n            let passwordConfirm = group.controls[fc2];\r\n            if (password.value === passwordConfirm.value) {\r\n                return null;\r\n            }\r\n            return { compareFailed: true };\r\n        };\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.isRegister) {\r\n            this.authService.add(this.userForm.value)\r\n                .subscribe((data) => {\r\n                    if (data.error == null) {\r\n                        // registration successful\r\n                        this.errorMessage = null;\r\n                        this.authService.login(\r\n                            this.userForm.value.username,\r\n                            this.userForm.value.password)\r\n                            .subscribe((data) => {\r\n                                // login successful\r\n                                this.errorMessage = null;\r\n                                this.router.navigate([\"\"]);\r\n                            },\r\n                            (err) => {\r\n                                console.log(err);\r\n                                // login failure\r\n                                this.errorMessage =\r\n                                    \"Warning: Username or Password mismatch\";\r\n                            });\r\n                    } else {\r\n                        // registration failure\r\n                        this.errorMessage = data.error;\r\n                    }\r\n                },\r\n                (err) => {\r\n                    // server/connection error\r\n                    this.errorMessage = err;\r\n                });\r\n        } else {\r\n            let user = new User(\r\n                this.userForm.value.username,\r\n                this.userForm.value.password,\r\n                this.userForm.value.passwordNew,\r\n                this.userForm.value.email,\r\n                this.userForm.value.displayName);\r\n            this.authService.update(user)\r\n                .subscribe((data) => {\r\n                    if (data.error == null) {\r\n                        // update successful\r\n                        this.errorMessage = null;\r\n                        this.router.navigate([\"\"]);\r\n                    } else {\r\n                        // update failure\r\n                        this.errorMessage = data.error;\r\n                    }\r\n                },\r\n                (err) => {\r\n                    // server/connection error\r\n                    this.errorMessage = err;\r\n                });\r\n        }\r\n    }\r\n}\r\n"]}