{"version":3,"sources":["relationship.service.ts"],"names":["RelationshipService","http","this","baseUrl","prototype","getAll","url","get","map","res","json","catch","handleError","id","Error","search","term","response","add","relationship","post","JSON","stringify","getRequestOptions","update","Id","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"kgCAOAA,oBAAA,WACI,QAAAA,qBAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,qBAgEtB,MA5DIH,qBAAAI,UAAAC,OAAA,WACI,GAAIC,KAAMJ,KAAKC,OACf,OAAOD,MAAKD,KAAKM,IAAID,KAChBE,IAAI,SAAAC,KAAO,MAAcA,KAAIC,SAC7BC,MAAMT,KAAKU,cAIpBZ,oBAAAI,UAAAG,IAAA,SAAIM,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIR,KAAMJ,KAAKC,QAAUU,EACzB,OAAOX,MAAKD,KAAKM,IAAID,KAChBE,IAAI,SAAAC,KAAO,MAAcA,KAAIC,SAC7BC,MAAMT,KAAKU,cAGpBZ,oBAAAI,UAAAW,OAAA,SAAOC,MACH,GAAIV,KAAMJ,KAAKC,QAAU,UAAYa,IACrC,OAAOd,MAAKD,KACAM,IAAID,KACXE,IAAI,SAAAS,UAAY,MAAgBA,UAASP,UAIlDV,oBAAAI,UAAAc,IAAA,SAAIC,cACA,GAAIb,KAAMJ,KAAKC,OACf,OAAOD,MAAKD,KAAKmB,KAAKd,IAAKe,KAAKC,UAAUH,cAAejB,KAAKqB,qBACzDf,IAAI,SAAAS,UAAY,MAAAA,UAASP,SACzBC,MAAMT,KAAKU,cAIpBZ,oBAAAI,UAAAoB,OAAA,SAAOL,cACH,GAAIb,KAAMJ,KAAKC,QAAUgB,aAAaM,EACtC,OAAOvB,MAAKD,KAAKyB,IAAIpB,IAAKe,KAAKC,UAAUH,cAAejB,KAAKqB,qBACxDf,IAAI,SAAAS,UAAY,MAAAA,UAASP,SACzBC,MAAMT,KAAKU,cAIpBZ,oBAAAI,UAAAuB,OAAA,SAAOd,IACH,GAAIP,KAAMJ,KAAKC,QAAUU,EACzB,OAAOX,MAAKD,KAAK0B,OAAOrB,KACnBK,MAAMT,KAAKU,cAIZZ,oBAAAI,UAAAmB,kBAAR,WACI,MAAO,IAAIK,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAKpBhC,oBAAAI,UAAAQ,YAAR,SAAoBqB,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMvB,OAAOuB,OAAS,iBAlEtDjC,oBAAAsC,YAACC,OAAAC,6FACDC,UAAA,sBAAAzC","file":"relationship.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Http, Response, Headers, RequestOptions} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {Relationship} from \"./relationship\";\r\nimport {AuthHttp} from \"./auth.http\";\r\n\r\n@Injectable()\r\nexport class RelationshipService {\r\n    constructor(private http: AuthHttp) { }\r\n\r\n    private baseUrl = \"api/relationships/\";  // web api URL\r\n\r\n\r\n    // calls the [GET] /api/relationships/ Web API method to retrieve all relationships.\r\n    getAll() {\r\n        var url = this.baseUrl;\r\n        return this.http.get(url)\r\n            .map(res => <Relationship>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n    \r\n    // calls the [GET] /api/relationships/{id} Web API method to retrieve the relationship with the given id.\r\n    get(id: number) {\r\n        if (id == null) { throw new Error(\"id is required.\"); }\r\n        var url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n            .map(res => <Relationship>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    search(term: string): Observable<Relationship[]> {\r\n        var url = this.baseUrl + \"Search/\" + term;\r\n        return this.http\r\n                   .get(url)\r\n            .map(response => <Relationship[]>response.json());\r\n    }\r\n\r\n    // calls the [POST] /api/stories/ Web API method to add a new storelationshipry.\r\n    add(relationship: Relationship) {\r\n        var url = this.baseUrl;\r\n        return this.http.post(url, JSON.stringify(relationship), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [PUT] /api/stories/{id} Web API method to update an existing relationship.\r\n    update(relationship: Relationship) {\r\n        var url = this.baseUrl + relationship.Id;\r\n        return this.http.put(url, JSON.stringify(relationship), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [DELETE] /api/stories/{id} Web API method to delete the relationship with the given id.\r\n    delete(id: number) {\r\n        var url = this.baseUrl + id;\r\n        return this.http.delete(url)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // returns a viable RequestOptions object to handle Json requests\r\n    private getRequestOptions() {\r\n        return new RequestOptions({\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        });\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        // output errors to the console.\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}\r\n"]}