{"version":3,"sources":["article.service.ts"],"names":["ArticleService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","catch","handleError","getMostViewed","getRandom","search","term","id","Error","res","add","article","post","JSON","stringify","getRequestOptions","update","Id","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"6/BAOAA,eAAA,WACI,QAAAA,gBAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,gBAkFtB,MA/EIH,gBAAAI,UAAAC,UAAA,SAAUC,KACN,GAAIC,KAAML,KAAKC,QAAU,YAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,eAAAI,UAAAU,cAAA,SAAcR,KACV,GAAIC,KAAML,KAAKC,QAAU,gBAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,eAAAI,UAAAW,UAAA,SAAUT,KACN,GAAIC,KAAML,KAAKC,QAAU,YAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAGpBb,eAAAI,UAAAY,OAAA,SAAOC,MACH,GAAIV,KAAML,KAAKC,QAAU,UAAYc,IACrC,OAAOf,MAAKD,KACAO,IAAID,KACJE,IAAI,SAAAC,UAAY,MAAWA,UAASC,UAIpDX,eAAAI,UAAAI,IAAA,SAAIU,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIZ,KAAML,KAAKC,QAAUe,EACzB,OAAOhB,MAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAW,KAAO,MAASA,KAAIT,SACxBC,MAAMV,KAAKW,cAIpBb,eAAAI,UAAAiB,IAAA,SAAIC,SACA,GAAIf,KAAML,KAAKC,OACf,OAAOD,MAAKD,KAAKsB,KAAKhB,IAAKiB,KAAKC,UAAUH,SAAUpB,KAAKwB,qBACpDjB,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,eAAAI,UAAAuB,OAAA,SAAOL,SACH,GAAIf,KAAML,KAAKC,QAAUmB,QAAQM,EACjC,OAAO1B,MAAKD,KAAK4B,IAAItB,IAAKiB,KAAKC,UAAUH,SAAUpB,KAAKwB,qBACnDjB,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,eAAAI,UAAA0B,OAAA,SAAOZ,IACH,GAAIX,KAAML,KAAKC,QAAUe,EACzB,OAAOhB,MAAKD,KAAK6B,OAAOvB,KACnBK,MAAMV,KAAKW,cAIZb,eAAAI,UAAAsB,kBAAR,WACI,MAAO,IAAIK,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAKpBnC,eAAAI,UAAAS,YAAR,SAAoBuB,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMzB,OAAOyB,OAAS,iBApFtDpC,eAAAyC,YAACC,OAAAC,wFACDC,UAAA,iBAAA5C","file":"article.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Http, Response, Headers, RequestOptions} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {Article} from \"./article\";\r\nimport {AuthHttp} from \"./auth.http\";\r\n\r\n@Injectable()\r\nexport class ArticleService {\r\n    constructor(private http: AuthHttp) { }\r\n\r\n    private baseUrl = \"api/articles/\";  // web api URL\r\n\r\n    // calls the [GET] /api/articles/GetLatest/{n} Web API method to retrieve the latest articles.\r\n    getLatest(num?: number) {\r\n        var url = this.baseUrl + \"GetLatest/\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/articles/GetMostViewed/{n} Web API method to retrieve the most viewed articles.\r\n    getMostViewed(num?: number) {\r\n        var url = this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/articles/GetRandom/{n} Web API method to retrieve n random articles.\r\n    getRandom(num?: number) {\r\n        var url = this.baseUrl + \"GetRandom/\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    search(term: string): Observable<Article[]> {\r\n        var url = this.baseUrl + \"Search/\" + term;\r\n        return this.http\r\n                   .get(url)\r\n                   .map(response => <Article[]>response.json());\r\n    }\r\n\r\n    // calls the [GET] /api/articles/{id} Web API method to retrieve the article with the given id.\r\n    get(id: number): Promise<Article> {\r\n        if (id == null) { throw new Error(\"id is required.\"); }\r\n        var url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n            .map(res => <Article>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [POST] /api/articles/ Web API method to add a new article.\r\n    add(article: Article) {\r\n        var url = this.baseUrl;\r\n        return this.http.post(url, JSON.stringify(article), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [PUT] /api/articles/{id} Web API method to update an existing article.\r\n    update(article: Article) {\r\n        var url = this.baseUrl + article.Id;\r\n        return this.http.put(url, JSON.stringify(article), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [DELETE] /api/articles/{id} Web API method to delete the article with the given id.\r\n    delete(id: number) {\r\n        var url = this.baseUrl + id;\r\n        return this.http.delete(url)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // returns a viable RequestOptions object to handle Json requests\r\n    private getRequestOptions() {\r\n        return new RequestOptions({\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        });\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        // output errors to the console.\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}\r\n"]}